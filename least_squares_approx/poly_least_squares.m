% file: poly_least_squares.m
%
% This matlab file consists of a single subroutine,
%
%       function [a,err] = poly_least_squares(x,y,M)
%
% where the user inputs:
%
%       x  - vector of nodes x=[x(1) ... x(N)]
%       y  - vector of data points y=[y(1) ... y(N)] corresponding to [x(1) ... x(N)]
%       M  - degree of the polynomial model
%
% and the subroutine outputs:
%
%       a  - vector of coefficients representing the polynomial model generated
%       err - error between the model and the data in the 2-norm
%
% The program computes the best fit polynomial generated by the least squares method
%
% This program was written by Benjamin Wallsten.
% Compiled on 2/23/2017.
%
%

function [a,err] = poly_least_squares(x,y,M)
    % finding n from n+1 data points, m=M
    n=length(x);
    m=M;

    % determine approximation for known basis functions using x nodes
    B=ones(n,m);
    for i=1:n
        for j=2:m
            B(i,j)=x(i)^(j-1);
        end
    end

    % solving for a in Ba=y if n=m
    if (n-1)==m
        B_inv=inv(B);
        a=y*B_inv;
    % solving for a in (B^T)Ba=(B^T)y
    else
        B_transpose=transpose(B);
        B_symm=B_transpose*B;
        B_symm_inv=inv(B_symm);
        B_transpose_y=B_transpose*y;
        a=B_symm_inv*B_transpose_y;
    end

    % determining error using SUM(y_p-approximant(x_p)^2)
    err=0;
    partial_approx_sum=0;
    partial_err_sum=0;

    % for all data points in y
    for i=1:n
        % value of approximant at x_n
        for j=1:m
            partial_approx_sum=partial_approx_sum+a(j)*(x(i)^(j-1));
        end
        partial_err_sum=partial_err_sum+((y(i)-partial_approx_sum)^2);
        partial_approx_sum=0;
    end
    err=partial_err_sum;

end